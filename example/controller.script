local flow = require "ludobits.m.flow"
local playfab = require "PlayFab.PlayFabClientApi"
local IPlayFabHttps = require("PlayFab.IPlayFabHttps")
local PlayFabHttps_Defold = require("PlayFab.PlayFabHttps_Defold")

local util = require "example.playfab.util"
local authentication = require "example.playfab.authentication"
local user_data = require "example.playfab.user_data"
local leaderboard = require "example.playfab.leaderboard"

-- Uncomment this to debug http requests
--[[local http_request = http.request
http.request = function(url, method, callback, headers, post_data, options)
	print(url)
	pprint(post_data)
	http_request(url, method, function(self, id, response)
		pprint(response)
		callback(self, id, response)
	end, headers, post_data, options)
end--]]

local function show_spinner()
	msg.post("main:/spinner#spinner", "show")
end

local function hide_spinner()
	msg.post("main:/spinner#spinner", "hide")
end

local function unload_all(self)
	for proxy,_ in pairs(self.loaded_collections) do
		self.loaded_collections[proxy] = nil
		flow.unload(proxy)
	end
end

local function unload(self, proxy)
	if self.loaded_collections[proxy] then
		self.loaded_collections[proxy] = nil
		flow.unload(proxy)
	end
end

local function load(self, proxy)
	if self.loaded_collections[proxy] then
		return
	end
	self.loaded_collections[proxy] = true
	flow.load(proxy)
end

local function show_popup(self, message)
	flow(function()
		show_spinner()
		load(self, "#popup_proxy")
		hide_spinner()
		flow.frames(1)
		msg.post("popup:/popup", "show", { text = message })
	end)
end

local function hide_popup(self, message)
	flow(function()
		show_spinner()
		unload(self, "#popup_proxy")
		hide_spinner()
	end)
end

local function show_startmenu(self, no_spinner)
	flow(function()
		if not no_spinner then show_spinner() end
		unload_all(self)
		load(self, "#startmenu_proxy")
		if not no_spinner then hide_spinner() end
	end)
end

local function show_login(self, message)
	flow.start(function()
		show_spinner()
		unload_all(self)
		load(self, "#login_proxy")
		if message then show_popup(self, message) end
		hide_spinner()
	end)
end

local function show_register(self)
	flow(function()
		show_spinner()
		unload_all(self)
		load(self, "#register_proxy")
		hide_spinner()
	end)
end

local function show_settings(self)
	flow(function()
		show_spinner()
		unload_all(self)
		load(self, "#settings_proxy")
		hide_spinner()
	end)
end

local function show_leaderboard(self)
	flow(function()
		show_spinner()
		unload_all(self)
		load(self, "#leaderboard_proxy")
		hide_spinner()
	end)
end

local function show_game(self)
	flow(function()
		show_spinner()
		unload_all(self)
		load(self, "#game_proxy")
		hide_spinner()
	end)
end


local function init_playfab()
	playfab.settings.titleId = "6DE1"
	IPlayFabHttps.SetHttp(PlayFabHttps_Defold)
	util.flow_apis()
end

function init(self)
	math.randomseed(os.time())
	msg.post("@render:", "set_zoom", { zoom = 1 })
	msg.post("@render:", "clear_color", { color = vmath.vector4(95 /256, 129 / 256, 161 / 256, 1 ) })
	msg.post(".", "acquire_input_focus")
	init_playfab()
	
	self.loaded_collections = {}
	
	flow(function()
		show_startmenu(self, true)
		show_spinner(self)
		authentication.listeners.add(msg.url())
		authentication.login()
		hide_spinner(self)
	end)
end

function final(self)
	msg.post(".", "release_input_focus")
	authentication.listeners.remove(msg.url())
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == authentication.LOGIN_SUCCESS then
		user_data.refresh()
		leaderboard.refresh()
	elseif message_id == authentication.LOGIN_FAILED then
		user_data.clear()
		leaderboard.clear()
	elseif message_id == authentication.LOGOUT_SUCCESS then
		user_data.clear()
		leaderboard.clear()
	elseif message_id == hash("show_game") then
		show_game(self)
	elseif message_id == hash("show_login") then
		show_login(self, message.text)
	elseif message_id == hash("show_register") then
		show_register(self)
	elseif message_id == hash("show_startmenu") then
		show_startmenu(self)
	elseif message_id == hash("show_settings") then
		show_settings(self)
	elseif message_id == hash("show_leaderboard") then
		show_leaderboard(self)
	elseif message_id == hash("show_popup") then
		show_popup(self, message.text)
	elseif message_id == hash("hide_popup") then
		hide_popup(self)
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
